#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
---
name: registry-sync.py
description: Registry Sync - Sync container images between two registries
people:
  developers:
  - name: Marcio Pessoa
    email: marcio.pessoa@gmail.com
"""

import subprocess
import shlex
import sys
import argparse
import json
import logging
import logging.handlers
import requests


class RegistrySync():
    """ RegistrySync class """

    __version__ = '0.2.6-53'
    __date__ = '2024-06-12'
    __name = 'registry_sync'

    def __init__(self):
        Log().name = self.__name
        Log().verbosity = 'WARNING'
        Log().start()

        self.__parser = None
        self._argparser()

        if len(sys.argv) < 2:
            print(
                f'{self.__name}: missing registry positional argument\n'
                f"Try '{self.__name} --help' for more information."
            )
            sys.exit()

        args = self.__parser.parse_args()
        self.__timeout = args.timeout
        Log().verbosity = args.verbosity
        log.debug('Source registry: %s', args.source)
        log.debug('Destination registry: %s', args.destination)

        for container in self.get_catalog(args.source,
                                          args.src_username,
                                          args.src_password):
            tags = self.get_tags(args.source,
                                 args.src_username,
                                 args.src_password,
                                 container)
            if tags:
                for tag in tags:
                    self.copy(
                        args.source,
                        args.src_username, args.src_password,
                        args.destination,
                        args.dst_username, args.dst_password,
                        container, tag)
            else:
                log.error('  No layers found.')

    def _argparser(self):
        self.__parser = argparse.ArgumentParser(
            prog='Registry Sync',
            formatter_class=argparse.RawDescriptionHelpFormatter,
            add_help=True,
            usage=(
                f'{self.__name} <source> <destination>\n\n'
            ),
            epilog=(
                'example:\n'
                f'  {self.__name} 192.168.15.1:5000 192.168.15.2:5000\n'
                '\n'
                'Copyleft (c) 2023-2024 Marcio Pessoa\n'
                'License: GPLv3\n'
                'Website: https://github.com/marcio-pessoa/registry_sync\n'
                'Contact: Marcio Pessoa <marcio.pessoa@gmail.com>\n'
            ),
        )
        self.__parser.add_argument('source', help='Source registry')
        self.__parser.add_argument('destination', help='Destination registry')
        self.__parser.add_argument(
            '--src-username',
            type=str,
            default=None,
            help=('Source user name')
        )
        self.__parser.add_argument(
            '--src-password',
            type=str,
            default=None,
            help=('Source password')
        )
        self.__parser.add_argument(
            '--dst-username',
            type=str,
            default=None,
            help=('Destination user name')
        )
        self.__parser.add_argument(
            '--dst-password',
            type=str,
            default=None,
            help=('Destination password')
        )
        self.__parser.add_argument(
            '-v', '--verbosity',
            type=str,
            choices=['CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG'],
            default='ERROR',
            help=(
                'verbose mode, options: '
                'CRITICAL, ERROR (default), WARNING, INFO, DEBUG'
            )
        )
        self.__parser.add_argument(
            '-t', '--timeout',
            type=int,
            default=10,
            help='API timeout'
        )
        self.__parser.add_argument(
            '-V', '--version',
            action='version',
            help='show version information and exit',
            version=(f'{self.__name} {self.__version__} {self.__date__}'),
        )

    def get_catalog(self, registry: str,
                    username: str, password: str) -> list[str]:
        """ Get registry catalog

        Args:
            registry (str): registry address

        Returns:
            list[str]: list of container images
        """
        log.debug('Fetching source catalog...')

        prefix: str = 'http://'
        suffix: str = '/v2/_catalog'
        uri: str = f'{prefix}{registry}{suffix}'

        if username and password:
            response = requests.get(uri, timeout=self.__timeout,
                                    auth=(username, password))
        else:
            response = requests.get(uri, timeout=self.__timeout)

        result = json.loads(response.text)

        if 'repositories' not in result:
            log.error('Failed to fetch catalog')
            sys.exit(1)

        log.debug(json_pretty(result['repositories']))

        return result['repositories']

    def get_tags(self, registry: str,
                 username: str, password: str,
                 container: str) -> list[str]:
        """ Get container image tags

        Args:
            registry (str): registry address
            container (str): container image name

        Returns:
            list[str]: list of tags
        """
        log.debug('Fetching source container image tags for %s...', container)

        prefix: str = 'http://'
        suffix: str = f'/v2/{container}/tags/list'
        uri: str = f'{prefix}{registry}{suffix}'

        if username and password:
            response = requests.get(uri, timeout=self.__timeout,
                                    auth=(username, password))
        else:
            response = requests.get(uri, timeout=self.__timeout)

        result = json.loads(response.text)

        if 'tags' not in result:
            log.error('Failed to fetch tags')
            sys.exit(1)

        log.debug(json_pretty(result['tags']))

        return result['tags']

    # pylint: disable=too-many-arguments
    def copy(self, source: str, src_username: str, src_password: str,
             destination: str, dst_username: str, dst_password: str,
             container: str, tag: str) -> subprocess.CompletedProcess:
        """ Copy container image tag between registries

        Args:
            source (str): source registry
            destination (str): destination registry
            container (str): container image name
            tag (str): container image tag

        Returns:
            CompletedProcess: OK when .returncode = 0
        """
        log.info('Syncing %s:%s', container, tag)

        preffix = 'docker://'
        copy_cmd = 'skopeo copy'
        args = '--src-tls-verify=false --dest-tls-verify=false'
        cmd = (
            f'{copy_cmd} {args} '
            f'{preffix}{source}/{container}:{tag} '
            f'{preffix}{destination}/{container}:{tag}'
        )

        if src_username and src_password:
            cmd += (
                ' '
                f'--src-username={src_username} '
                f'--src-password={src_password}'
            )

        if dst_username and dst_password:
            cmd += (
                ' '
                f'--dest-username={dst_username} '
                f'--dest-password={dst_password}'
            )

        log.debug('Running: %s', cmd)

        stdout = subprocess.DEVNULL
        if Log().verbosity == 10:
            stdout = None

        result = subprocess.run(
            shlex.split(cmd),
            shell=False,
            check=True,
            stdout=stdout
        )
        if result.returncode != 0:
            log.error('Failed')

        return result


class Log:
    """ Log Borg pattern """
    _shared_state = {}
    name: str = 'Default log'
    logger = logging.getLogger(name)
    __verbosity: int = logging.WARNING  # example: logging.ERROR

    def __new__(cls):
        inst = super().__new__(cls)
        inst.__dict__ = cls._shared_state
        return inst

    def start(self) -> None:
        """ Start the log system """
        fmt = self.name + ' [%(process)d]: %(levelname)s: %(message)s'
        handler = logging.StreamHandler(sys.stdout)
        handler.setFormatter(CustomFormatter(fmt))
        self.logger.addHandler(handler)

    @property
    def verbosity(self) -> int:
        """ verbosity getter function

        Returns:
            int: verbosity level
        """
        return self.__verbosity

    @verbosity.setter
    def verbosity(self, level):
        if level == 'DEBUG':
            self.__verbosity = logging.DEBUG
        elif level == 'INFO':
            self.__verbosity = logging.INFO
        elif level == 'WARNING':
            self.__verbosity = logging.WARNING
        elif level == 'ERROR':
            self.__verbosity = logging.ERROR
        elif level == 'CRITICAL':
            self.__verbosity = logging.CRITICAL
        else:
            self.__verbosity = logging.ERROR

        self.logger.setLevel(self.__verbosity)


class CustomFormatter(logging.Formatter):
    """ Add colors to log """
    grey = '\x1b[38;21m'
    blue = '\x1b[38;5;39m'
    yellow = '\x1b[38;5;226m'
    red = '\x1b[38;5;196m'
    bold_red = '\x1b[31;1m'
    reset = '\x1b[0m'

    def __init__(self, fmt):
        super().__init__()
        self.fmt = fmt
        self.formats = {
            logging.DEBUG: self.grey + self.fmt + self.reset,
            logging.INFO: self.blue + self.fmt + self.reset,
            logging.WARNING: self.yellow + self.fmt + self.reset,
            logging.ERROR: self.red + self.fmt + self.reset,
            logging.CRITICAL: self.bold_red + self.fmt + self.reset
        }

    def format(self, record):
        log_fmt = self.formats.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)


def json_pretty(data: dict) -> str:
    """ Pretty output JSON data

    Args:
        data (dict): dictionary to be formmated as JSON

    Returns:
        str: pretty JSON
    """
    return json.dumps(data, indent=2, separators=(", ", ": "))


log = Log().logger

if __name__ == '__main__':
    RegistrySync()
